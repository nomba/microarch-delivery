// <auto-generated />
using System;
using DeliveryApp.Infrastructure.Adapters.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DeliveryApp.Infrastructure.Adapters.Postgres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241124111331_Outbox")]
    partial class Outbox
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.CourierAggregate.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.Property<int>("transport_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("status_id");

                    b.HasIndex("transport_id");

                    b.ToTable("couriers", (string)null);
                });

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.CourierAggregate.CourierStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("courier_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "free"
                        },
                        new
                        {
                            Id = 2,
                            Name = "busy"
                        });
                });

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.CourierAggregate.Transport", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("transports", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "pedestrian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "bicycle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "car"
                        });
                });

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uuid")
                        .HasColumnName("courier_id");

                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("status_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.OrderAggregate.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("order_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "assigned"
                        },
                        new
                        {
                            Id = 3,
                            Name = "completed"
                        });
                });

            modelBuilder.Entity("DeliveryApp.Infrastructure.Adapters.Postgres.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("HandledAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("handled_at_utc");

                    b.Property<DateTime>("OccuredAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_at_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox", (string)null);
                });

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.CourierAggregate.Courier", b =>
                {
                    b.HasOne("DeliveryApp.Core.Domain.Model.OrderAggregate.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("DeliveryApp.Core.Domain.Model.CourierAggregate.CourierStatus", "Status")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryApp.Core.Domain.Model.CourierAggregate.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("transport_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DeliveryApp.Core.Domain.SharedKernel.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("CourierId")
                                .HasColumnType("uuid");

                            b1.Property<int>("X")
                                .HasColumnType("integer")
                                .HasColumnName("location_x");

                            b1.Property<int>("Y")
                                .HasColumnType("integer")
                                .HasColumnName("location_y");

                            b1.HasKey("CourierId");

                            b1.ToTable("couriers");

                            b1.WithOwner()
                                .HasForeignKey("CourierId");
                        });

                    b.OwnsOne("DeliveryApp.Core.Domain.SharedKernel.Location", "OrderLocation", b1 =>
                        {
                            b1.Property<Guid>("CourierId")
                                .HasColumnType("uuid");

                            b1.Property<int>("X")
                                .HasColumnType("integer")
                                .HasColumnName("order_location_x");

                            b1.Property<int>("Y")
                                .HasColumnType("integer")
                                .HasColumnName("order_location_y");

                            b1.HasKey("CourierId");

                            b1.ToTable("couriers");

                            b1.WithOwner()
                                .HasForeignKey("CourierId");
                        });

                    b.Navigation("Location");

                    b.Navigation("OrderLocation");

                    b.Navigation("Status");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.CourierAggregate.Transport", b =>
                {
                    b.OwnsOne("DeliveryApp.Core.Domain.SharedKernel.Speed", "Speed", b1 =>
                        {
                            b1.Property<int>("TransportId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("speed_value");

                            b1.HasKey("TransportId");

                            b1.ToTable("transports");

                            b1.WithOwner()
                                .HasForeignKey("TransportId");

                            b1.HasData(
                                new
                                {
                                    TransportId = 1,
                                    Value = 1
                                },
                                new
                                {
                                    TransportId = 2,
                                    Value = 2
                                },
                                new
                                {
                                    TransportId = 3,
                                    Value = 3
                                });
                        });

                    b.Navigation("Speed");
                });

            modelBuilder.Entity("DeliveryApp.Core.Domain.Model.OrderAggregate.Order", b =>
                {
                    b.HasOne("DeliveryApp.Core.Domain.Model.CourierAggregate.Courier", null)
                        .WithMany()
                        .HasForeignKey("CourierId");

                    b.HasOne("DeliveryApp.Core.Domain.Model.OrderAggregate.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DeliveryApp.Core.Domain.SharedKernel.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<int>("X")
                                .HasColumnType("integer")
                                .HasColumnName("location_x");

                            b1.Property<int>("Y")
                                .HasColumnType("integer")
                                .HasColumnName("location_y");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Location");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
